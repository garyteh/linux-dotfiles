[[ -e "$HOME/.ssh/config" ]] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh

function p() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && echo '__P_PROJECT_PATH not found.' && return 1
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: p [directory-name]

Navigate to your project quickly. 
EOF
    local path paths numberOfProjects searchTerm
    searchTerm="$1"
    paths=$(find $__P_PROJECT_PATH -maxdepth ${__P_MAX_DEPTH:-1} -type d -name $searchTerm)
    numberOfProjects=$(wc -l <<< "$paths")
    if [[ $numberOfProjects -eq 1 ]]; then
        path=$(sed '1q;d' <<< "$paths")
        [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
        return 0
    elif [[ $numberOfProjects -gt 1 ]]; then
        nl <<< "$paths"
        while true; do
            read -p "Select project (1-$numberOfProjects): " index
            if [[ $index =~ ^[0-9]+$ ]]; then
                path=$(sed "${index}q;d" <<< "$paths")
                [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
                return 0
            fi
        done
    fi
    echo "Project not found: $searchTerm"
    return 1
}

function _p() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && return 1
    local curr potentials 
    curr="${COMP_WORDS[COMP_CWORD]}"
    potentials=$(find $__P_PROJECT_PATH -maxdepth ${__P_MAX_DEPTH:-1} -type d | grep -o -E "[^/]*$")
    COMPREPLY=( $(compgen -W "${potentials}" -- ${curr}) )
}
complete -F _p p

function f() {
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: f [search-term]

Find file name from current folder.
EOF
    local tmpFolder="/tmp/_f_findings"
    find . -iname "*$1*" | tee $tmpFolder | nl
}

function f#() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: f# [0..n]

Show file path from `f` results. You have to use `f` first.
EOF
    sed "${1}q;d" $tmpFolder
}

function fvim() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]

Open the file from `f` results in vim. You have to use `f` first.
EOF
    vim $(sed "${1}q;d" $tmpFolder)
}

function fcode() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]

Open the file from `f` results in Visual Studio Code. You have to use `f` first.
EOF
    code $(sed "${1}q;d" $tmpFolder)
}

function idea() {
    local idea_bin_path="/usr/local/bin/idea"
    [[ ! -e "$idea_bin_path" ]] && (>&2 echo "idea CLI is not found in [$idea_bin_path].") && return 1
    [[ "$1" == "-h" ]] && cat << EOF && return 1
Usage: idea path[:number]

Open an arbitrary file, folder, or project for editing in IntelliJ IDEA.
For more information, please visit https://www.jetbrains.com/help/idea/opening-files-from-command-line.html.
EOF
    if [[ $# -lt 1 ]]; then
        nohup $idea_bin_path . &> /dev/null &
    else
        nohup $idea_bin_path "$@" &> /dev/null &
    fi
}

function idea-diff() {
    local idea_bin_path="/usr/local/bin/idea"
    [[ ! -e "$idea_bin_path" ]] && (>&2 echo "idea CLI is not found in [$idea_bin_path].") && return 1
    [[ $# -ne 2 ]] && cat << EOF && return 1
Usage: idea-diff path1 path2

Viewing differences between files in IntelliJ IDEA.
For more information, please visit https://www.jetbrains.com/help/idea/command-line-differences-viewer.html.
EOF
    nohup $idea_bin_path diff "$@" &> /dev/null &
}

function idea-merge() {
    local idea_bin_path="/usr/local/bin/idea"
    [[ ! -e "$idea_bin_path" ]] && (>&2 echo "idea CLI is not found in [$idea_bin_path].") && return 1
    [[ $# -ne 3 ]] && [[ $# -ne 4 ]] && cat << EOF && return 1
Usage: idea-merge path1 path2 [path3] output

Merge files in IntelliJ IDEA.
For more information, please visit https://www.jetbrains.com/help/idea/command-line-merge-tool.html.
EOF
    nohup $idea_bin_path merge "$@" &> /dev/null &
}

function nvm() {
    [[ ! -e "$NVM_DIR" ]] && (>&2 echo "nvm is not found in [$NVM_DIR].") && return 1
    unset -f nvm
    source $NVM_DIR/nvm.sh
    nvm "$@"
}

function node() {
    [[ ! -e "$NVM_DIR" ]] && (>&2 echo "nvm is not found in [$NVM_DIR].") && return 1
    unset -f node
    source $NVM_DIR/nvm.sh
    node "$@"
}

function npm() {
    [[ ! -e "$NVM_DIR" ]] && (>&2 echo "nvm is not found in [$NVM_DIR].") && return 1
    unset -f npm
    source $NVM_DIR/nvm.sh
    source <(npm completion)
    npm "$@"
}

function rbenv() {
    unset -f rbenv
    eval "$(rbenv init -)"
    rbenv "$@"
}

function jenv() {
    unset -f jenv
    eval "$(jenv init -)"
    jenv "$@"
}
